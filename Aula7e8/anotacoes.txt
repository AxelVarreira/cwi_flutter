StreamController 
  -> Sempre dar dispose() 
  -> Se criar um "custom" stream, tambem dar dispose()
  -> A custom stream retorna uma Stream<Tipo> e a palavra return deixa de existir, vira "yield", "async" vira "async*"
  -> Stream fornece os dados com o Yield e dispara em ordem
  -> Controller instanciador dos dados e listener
  -> Sink Responsavel por manipular os dados, adicionar evento na lista do controller

AnimationController 
  -> Cria animacoes de transicao, precisa apenas de uma duration

Bloc 
  -> BlocBuilder atualiza a tela
  -> BlockProvider prove a variavel para o widget
  -> BlocCOnsumer consome a variavel


Clean Dart: https://github.com/Flutterando/Clean-Dart
  => Pasta Presenter: Ui e OutPut
  => Domain: Parte dos negocios da aplicacao, UseCases, Entities, interfaces...
  => Infra: Implementacao repositorios, services... Interface datasources and drivers...
  => External: Datasources e Drivers
